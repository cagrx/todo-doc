"use strict";(self.webpackChunktodo_doc=self.webpackChunktodo_doc||[]).push([[1963],{3865:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"level1/auth/authentication/token-flow","title":"Get User ID within API","description":"Firebase Authentication Token Flow","source":"@site/docs/level1/auth/authentication/token-flow.md","sourceDirName":"level1/auth/authentication","slug":"/level1/auth/authentication/token-flow","permalink":"/todo-doc/docs/level1/auth/authentication/token-flow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Token Flow & Private Key","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Firebase Authentication","permalink":"/todo-doc/docs/level1/auth/authentication/firebase1"},"next":{"title":"Get User ID within API","permalink":"/todo-doc/docs/level1/auth/authentication/firebase-get-userid"}}');var t=i(4848),r=i(8453);const o={sidebar_label:"Token Flow & Private Key",sidebar_position:5},l="Get User ID within API",c={},a=[{value:"Firebase Authentication Token Flow",id:"firebase-authentication-token-flow",level:2},{value:"Role of Your Firebase Private Key in Authentication",id:"role-of-your-firebase-private-key-in-authentication",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"get-user-id-within-api",children:"Get User ID within API"})}),"\n",(0,t.jsx)(n.h2,{id:"firebase-authentication-token-flow",children:"Firebase Authentication Token Flow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Token Issuance"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When a user signs in (anonymously or otherwise), the Firebase Authentication service, hosted by Google, generates a JWT (JSON Web Token)."}),"\n",(0,t.jsx)(n.li,{children:"This token is sent from Google's Firebase servers to the client (your web page in the user's browser) over an SSL/TLS encrypted connection."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Token Storage"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The client-side Firebase SDK typically stores this token securely in the browser."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Token Usage"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Your client-side application retrieves the token from storage when needed."}),"\n",(0,t.jsx)(n.li,{children:"The token should be sent with all requests to your backend, usually in the Authorization header."}),"\n",(0,t.jsx)(n.li,{children:"All communication between your client app and your backend should be done over HTTPS, ensuring the token remains encrypted in transit."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Token Contents"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The token contains the User ID (uid) of the authenticated user."}),"\n",(0,t.jsx)(n.li,{children:"It also includes other information such as token expiration time, issuer, etc."}),"\n",(0,t.jsx)(n.li,{children:"This information is encoded (not encrypted) within the token itself."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Token Security"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The token is digitally signed to prevent tampering."}),"\n",(0,t.jsx)(n.li,{children:"While the token's contents are encoded, not encrypted, all transmission of the token occurs over encrypted SSL/TLS connections."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Token Verification"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only the Firebase Admin SDK should be used to verify and decode the token on your server."}),"\n",(0,t.jsx)(n.li,{children:"While the token can be decoded client-side, it should never be trusted without server verification."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Admin SDK Role"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Firebase Admin SDK verifies the token's signature."}),"\n",(0,t.jsx)(n.li,{children:"It checks if the token was indeed issued by Firebase and hasn't been altered."}),"\n",(0,t.jsx)(n.li,{children:"After verification, it provides the decoded token information, including the User ID."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key Points:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The initial token is generated and sent by Google's Firebase Authentication servers, not your own backend."}),"\n",(0,t.jsx)(n.li,{children:"This communication from Google to the user's browser is encrypted via SSL/TLS."}),"\n",(0,t.jsx)(n.li,{children:"Subsequent use of the token (sending it to your backend) should also be over encrypted connections (HTTPS)."}),"\n",(0,t.jsx)(n.li,{children:"Your backend then uses the Firebase Admin SDK to verify tokens received from clients."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"role-of-your-firebase-private-key-in-authentication",children:"Role of Your Firebase Private Key in Authentication"}),"\n",(0,t.jsx)(n.p,{children:"The Firebase private key, which you generated and downloaded as a JSON file from the Firebase Console, is essential for server-side operations. Here's how it fits into the authentication flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The private key is used to authenticate your server to Firebase services."}),"\n",(0,t.jsx)(n.li,{children:"It allows your server to act as an admin and access Firebase services securely."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage in Token Verification"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When your server receives a token from a client, it uses the Firebase Admin SDK to verify this token."}),"\n",(0,t.jsx)(n.li,{children:"The Admin SDK uses the private key to securely communicate with Firebase services to validate the token."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Process"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Your server initializes the Firebase Admin SDK with the private key."}),"\n",(0,t.jsx)(n.li,{children:"When verifying a token, the SDK uses this key to make secure API calls to Firebase."}),"\n",(0,t.jsx)(n.li,{children:"Firebase uses the key to confirm that the verification request is coming from your authorized server."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Security Implications"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The private key grants administrative access to your Firebase project."}),"\n",(0,t.jsx)(n.li,{children:"It should never be shared publicly or included in client-side code."}),"\n",(0,t.jsx)(n.li,{children:"Typically, it's stored securely on your server, often as an environment variable."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Rotation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can generate new private keys and revoke old ones from the Firebase Console."}),"\n",(0,t.jsx)(n.li,{children:"This allows you to rotate keys for security purposes without disrupting your application."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scope of Use"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Besides token verification, the private key allows your server to perform other admin operations:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Managing users (create, delete, modify)"}),"\n",(0,t.jsx)(n.li,{children:"Accessing Firestore with admin privileges"}),"\n",(0,t.jsx)(n.li,{children:"Sending Firebase Cloud Messages"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Remember:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Keep your Firebase private key secure at all times."}),"\n",(0,t.jsx)(n.li,{children:"Never expose it in client-side code or public repositories."}),"\n",(0,t.jsx)(n.li,{children:"Use environment variables or secure secret management systems to handle the key in your server environment."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);