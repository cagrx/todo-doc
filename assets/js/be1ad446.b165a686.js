"use strict";(self.webpackChunktodo_doc=self.webpackChunktodo_doc||[]).push([[5152],{2511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"level1/app/create","title":"create","description":"Implementing the Create Operation","source":"@site/docs/level1/app/create.md","sourceDirName":"level1/app","slug":"/level1/app/create","permalink":"/todo-doc/docs/level1/app/create","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_label":"Create","sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Environment Setup ","permalink":"/todo-doc/docs/level1/app/env-setup"},"next":{"title":"Create w/Validation","permalink":"/todo-doc/docs/level1/app/create-validate"}}');var s=n(4848),r=n(8453);const i={sidebar_label:"Create",sidebar_position:30},d=void 0,a={},c=[{value:"Implementing the Create Operation",id:"implementing-the-create-operation",level:2},{value:"Step 1: Creating the createTodo Function",id:"step-1-creating-the-createtodo-function",level:3},{value:"Step 2: Writing a Test for createTodo",id:"step-2-writing-a-test-for-createtodo",level:3},{value:"Step 3: Running the Test",id:"step-3-running-the-test",level:3},{value:"Understanding the Code",id:"understanding-the-code",level:3},{value:"Understanding the Code",id:"understanding-the-code-1",level:3},{value:"Verifying the Database Record",id:"verifying-the-database-record",level:3},{value:"Next Steps",id:"next-steps",level:3}];function l(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"implementing-the-create-operation",children:"Implementing the Create Operation"}),"\n",(0,s.jsxs)(t.p,{children:["In this section, we'll implement our first CRUD operation: Create. We'll start by building a basic ",(0,s.jsx)(t.code,{children:"createTodo"})," function and then write a simple test to ensure it works correctly."]}),"\n",(0,s.jsx)(t.h3,{id:"step-1-creating-the-createtodo-function",children:"Step 1: Creating the createTodo Function"}),"\n",(0,s.jsxs)(t.p,{children:["Open ",(0,s.jsx)(t.code,{children:"todoOperations.js"})," and add the following code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'const db = require("./db");\n\nasync function createTodo(todoData) {\n  console.log("todoData:", todoData);\n\n  try {\n    const [result] = await db.pool.query(\n      "INSERT INTO todos (name, is_done, sort_order) VALUES (?, ?, ?)",\n      [todoData.name, todoData.is_done, todoData.sort_order]\n    );\n    return {\n      id: result.insertId,\n      name: todoData.name,\n      is_done: todoData.is_done,\n      sort_order: todoData.sort_order,\n    };\n  } catch (error) {\n    throw new Error(`Failed to create todo: ${error.message}`);\n  }\n}\n\nmodule.exports = {\n  createTodo,\n};\n'})}),"\n",(0,s.jsx)(t.p,{children:"This function does the following:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["It takes a ",(0,s.jsx)(t.code,{children:"todoData"})," object as an argument, which should contain the todo's name, status, and sort order."]}),"\n",(0,s.jsx)(t.li,{children:"It uses the database connection pool to execute an INSERT query."}),"\n",(0,s.jsx)(t.li,{children:"If successful, it returns an object representing the newly created todo, including its assigned ID."}),"\n",(0,s.jsx)(t.li,{children:"If an error occurs, it throws an error with a descriptive message."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"step-2-writing-a-test-for-createtodo",children:"Step 2: Writing a Test for createTodo"}),"\n",(0,s.jsxs)(t.p,{children:["Now, let's create a simple test to verify our ",(0,s.jsx)(t.code,{children:"createTodo"})," function. Open ",(0,s.jsx)(t.code,{children:"testOperations.js"})," and add the following code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'const { createTodo } = require("./todoOperations");\n\nasync function runTests() {\n  try {\n    // Test create\n    console.log("Creating a new todo...");\n    const newTodoData = {\n      name: "Test todo",\n      is_done: 0,\n      sort_order: 1,\n    };\n    const newTodo = await createTodo(newTodoData);\n    console.log("New todo created:", newTodo);\n  } catch (error) {\n    console.error("Test failed:", error.message);\n  } finally {\n    process.exit();\n  }\n}\n\nrunTests();\n'})}),"\n",(0,s.jsx)(t.p,{children:"This test function:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Imports the createTodo function from ",(0,s.jsx)(t.code,{children:"todoOperations.js"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Defines a ",(0,s.jsx)(t.code,{children:"runTests"})," function that:"]}),"\n",(0,s.jsx)(t.li,{children:"Creates a test todo item"}),"\n",(0,s.jsxs)(t.li,{children:["Calls ",(0,s.jsx)(t.code,{children:"createTodo"})," with this test data"]}),"\n",(0,s.jsx)(t.li,{children:"Logs the result"}),"\n",(0,s.jsx)(t.li,{children:"Catches and logs any errors that occur during the test."}),"\n",(0,s.jsx)(t.li,{children:"Exits the process after the test completes."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"step-3-running-the-test",children:"Step 3: Running the Test"}),"\n",(0,s.jsx)(t.p,{children:"To run the test:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Ensure your database is set up and running."}),"\n",(0,s.jsxs)(t.li,{children:["Verify that your ",(0,s.jsx)(t.code,{children:".env"})," file is correctly configured with your database details."]}),"\n",(0,s.jsx)(t.li,{children:"Open a terminal in your project directory."}),"\n",(0,s.jsxs)(t.li,{children:["Run the command: ",(0,s.jsx)(t.code,{children:"node testOperations.js"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"You should see output similar to this if the test is successful:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"Creating a new todo...\nNew todo created: { id: 1, name: 'Test todo', is_done: 0, sort_order: 1 }\n"})}),"\n",(0,s.jsx)(t.h3,{id:"understanding-the-code",children:"Understanding the Code"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Async/Await"}),": Both ",(0,s.jsx)(t.code,{children:"createTodo"})," and ",(0,s.jsx)(t.code,{children:"runTests"})," are async functions, allowing us to use ",(0,s.jsx)(t.code,{children:"await"})," for asynchronous operations like database queries."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Error Handling"}),": We use try-catch blocks to handle potential errors, both in the ",(0,s.jsx)(t.code,{children:"createTodo"})," function and in our test."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Database Interaction"}),": We're using the ",(0,s.jsx)(t.code,{children:"query"})," method of our database pool to execute SQL statements."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Object Destructuring"}),": In ",(0,s.jsx)(t.code,{children:"createTodo"}),", we use ",(0,s.jsx)(t.code,{children:"const [result] = await db.pool.query(...)"})," to extract the first element of the array returned by the query method."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"understanding-the-code-1",children:"Understanding the Code"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Async/Await"}),": Both ",(0,s.jsx)(t.code,{children:"createTodo"})," and ",(0,s.jsx)(t.code,{children:"runTests"})," are async functions, allowing us to use ",(0,s.jsx)(t.code,{children:"await"})," for asynchronous operations like database queries."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Error Handling"}),": We use try-catch blocks to handle potential errors, both in the ",(0,s.jsx)(t.code,{children:"createTodo"})," function and in our test."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Database Interaction"}),": We're using the ",(0,s.jsx)(t.code,{children:"query"})," method of our database pool to execute SQL statements."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Object Destructuring"}),": In ",(0,s.jsx)(t.code,{children:"createTodo"}),", we use ",(0,s.jsx)(t.code,{children:"const [result] = await db.pool.query(...)"})," to extract the first element of the array returned by the query method."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"verifying-the-database-record",children:"Verifying the Database Record"}),"\n",(0,s.jsx)(t.p,{children:"After running the test successfully, it's crucial to verify that the record has indeed been inserted into the database. Let's use Navicat MySQL to check our database:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Open Navicat MySQL and connect to your database."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["In the navigation pane, expand your database and find the ",(0,s.jsx)(t.code,{children:"todos"})," table."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Right-click on the ",(0,s.jsx)(t.code,{children:"todos"}),' table and select "Open Table".']}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"In the query editor, enter the following SQL command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM todos ORDER BY id DESC LIMIT 1;\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:'Execute the query by clicking the "Run" button or pressing F6.'}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"You should see a result similar to this:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"id"}),(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"is_done"}),(0,s.jsx)(t.th,{children:"sort_order"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Test todo"}),(0,s.jsx)(t.td,{children:"0"}),(0,s.jsx)(t.td,{children:"1"})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["This confirms that our ",(0,s.jsx)(t.code,{children:"createTodo"})," function successfully inserted the new todo item into the database."]}),"\n",(0,s.jsxs)(t.p,{children:["If you don't see the record or if the data doesn't match what you expected, double-check your database connection settings and review the ",(0,s.jsx)(t.code,{children:"createTodo"})," function for any potential issues."]}),"\n",(0,s.jsx)(t.h3,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(t.p,{children:["While this implementation works, it lacks input validation and error checking. In the next section, we'll add these features to make our ",(0,s.jsx)(t.code,{children:"createTodo"})," function more robust and secure."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);