"use strict";(self.webpackChunktodo_doc=self.webpackChunktodo_doc||[]).push([[9995],{6173:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"level1/auth/authentication/support-create","title":"Support Create","description":"We\'ll do the following to support the create operation:","source":"@site/docs/level1/auth/authentication/support-create.md","sourceDirName":"level1/auth/authentication","slug":"/level1/auth/authentication/support-create","permalink":"/todo-doc/docs/level1/auth/authentication/support-create","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_label":"Support Create","sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Add User ID to the Database","permalink":"/todo-doc/docs/level1/auth/authentication/add-userid-db"},"next":{"title":"Support Read","permalink":"/todo-doc/docs/level1/auth/authentication/support-read"}}');var r=t(4848),i=t(8453);const s={sidebar_label:"Support Create",sidebar_position:30},a="Support Create",d={},l=[{value:"Front End",id:"front-end",level:2},{value:"API",id:"api",level:2},{value:"Business Object",id:"business-object",level:2},{value:"Verify with Postman",id:"verify-with-postman",level:2},{value:"Verify with Web Page",id:"verify-with-web-page",level:2},{value:"Verify with DB",id:"verify-with-db",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"support-create",children:"Support Create"})}),"\n",(0,r.jsx)(n.p,{children:"We'll do the following to support the create operation:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Front End"}),": Modify the front end ",(0,r.jsx)(n.code,{children:"createTodo"})," function to send the Firebase authentication token."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API"}),": Modify the ",(0,r.jsx)(n.strong,{children:"create todo endpoint"})," to make it protected (require authenticated access) and extract the user id from the request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Business Object"}),": Modify the ",(0,r.jsx)(n.strong,{children:"create todo function"})," to validate the user id and include it in the sql insert statement."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verify with Postman"}),": Verify the operation works using Postman."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verify with Web Page"}),": Verify the operation works using the web page."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verify with Database"}),": Verify the operation works by querying the database and seeing the user ids."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"front-end",children:"Front End"}),"\n",(0,r.jsxs)(n.p,{children:["In your html page, the ",(0,r.jsx)(n.code,{children:"createTodo"})," javascript likely looks something like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Create a new todo\nasync function createTodo(name) {\n  try {\n    await fetch("/api/todos", {\n      method: "POST",\n      headers: {\n        "Content-Type": "application/json",\n      },\n      body: JSON.stringify({ name, is_done: 0 }),\n    });\n  } catch (error) {\n    console.error("Error creating todo:", error);\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We're ",(0,r.jsx)(n.strong,{children:"not"})," going to change our function to send user id directly. Instead, we're going to add the authentication token to the authorization header so we can validate it on the backend and extract the id there, like we did for our ",(0,r.jsx)(n.code,{children:"ping"})," example earlier."]}),"\n",(0,r.jsx)(n.p,{children:"Update your function to look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Create a new todo\nasync function createTodo(name) {\n  try {\n    //highlight-start\n    // Get the user token\n    const token = await getIdToken();\n    //highlight-end\n\n    await fetch("/api/todos", {\n      method: "POST",\n      headers: {\n        //highlight-next-line\n        Authorization: "Bearer " + token,\n        "Content-Type": "application/json",\n      },\n      body: JSON.stringify({ name, is_done: 0 }),\n    });\n  } catch (error) {\n    console.error("Error creating todo:", error);\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:'Note: You should put quotes around "Authorization" above. Docusaurus (this documentation tool) is artificially stripping them out.'}),"\n",(0,r.jsxs)(n.p,{children:["Reminder: We call ",(0,r.jsx)(n.code,{children:"getIdToken()"})," to ensure we have a fresh valid token."]}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsxs)(n.p,{children:["Let's update the API endpoint to use our ",(0,r.jsx)(n.code,{children:"verifyToken"})," middleware function."]}),"\n",(0,r.jsx)(n.p,{children:"Your current endpoint likely looks something like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Create a todo\napp.post("/api/todos", async (req, res) => {\n  try {\n    const newTodo = await createTodo(req.body);\n    res.status(201).json(newTodo);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Update your function to look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Create a todo\n// highlight-next-line\napp.post("/api/todos", verifyToken, async (req, res) => {\n  try {\n    // highlight-start\n    const user_id = req.user.uid;\n    const todoData = {\n      ...req.body,\n      user_id: user_id,\n    };\n    // highlight-end\n    const newTodo = await createTodo(todoData);\n    res.status(201).json(newTodo);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To accomodate passing the user id to the business object, instead of simply passing ",(0,r.jsx)(n.code,{children:"req.body"})," (which contains the todo contents) to ",(0,r.jsx)(n.code,{children:"createTodo()"}),", we're creating a new ",(0,r.jsx)(n.code,{children:"todoData"})," object which contains ",(0,r.jsx)(n.code,{children:"req.body"})," like before, but also the new ",(0,r.jsx)(n.code,{children:"user_id"})," property."]}),"\n",(0,r.jsx)(n.h2,{id:"business-object",children:"Business Object"}),"\n",(0,r.jsx)(n.p,{children:"Let's update the business object to include validating and inserting the user id."}),"\n",(0,r.jsx)(n.p,{children:"Your current function likely looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'async function createTodo(todoData) {\n  // Validate name\n  if (!todoData.name || todoData.name.trim() === "") {\n    throw new Error("Todo name is required");\n  }\n\n  // Validate and set default for is_done\n  if (todoData.is_done === undefined) {\n    todoData.is_done = 0; // Set default value\n  } else if (todoData.is_done !== 0 && todoData.is_done !== 1) {\n    throw new Error("is_done must be 0 or 1");\n  }\n\n  // Validate and set default for sort_order\n  if (todoData.sort_order === undefined) {\n    todoData.sort_order = Date.now(); // Default value is current timestamp in milliseconds\n  } else if (!Number.isInteger(todoData.sort_order)) {\n    throw new Error("sort_order must be an integer");\n  }\n\n  try {\n    const [result] = await db.pool.query(\n      "INSERT INTO todos (name, is_done, sort_order) VALUES (?, ?, ?)",\n      [todoData.name, todoData.is_done, todoData.sort_order]\n    );\n    return {\n      id: result.insertId,\n      name: todoData.name,\n      is_done: todoData.is_done,\n      sort_order: todoData.sort_order,\n    };\n  } catch (error) {\n    throw new Error(`Failed to create todo: ${error.message}`);\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Update your function to validate a user id exists, and to insert it into the database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'async function createTodo(todoData) {\n  // Validate name\n  if (!todoData.name || todoData.name.trim() === "") {\n    throw new Error("Todo name is required");\n  }\n\n  // highlight-start\n  // Validate user_id\n  if (!todoData.user_id || todoData.user_id.trim() === "") {\n    throw new Error("Todo user_id is required");\n  }\n  // highlight-end\n\n  // Validate and set default for is_done\n  if (todoData.is_done === undefined) {\n    todoData.is_done = 0; // Set default value\n  } else if (todoData.is_done !== 0 && todoData.is_done !== 1) {\n    throw new Error("is_done must be 0 or 1");\n  }\n\n  // Validate and set default for sort_order\n  if (todoData.sort_order === undefined) {\n    todoData.sort_order = Date.now(); // Default value is current timestamp in milliseconds\n  } else if (!Number.isInteger(todoData.sort_order)) {\n    throw new Error("sort_order must be an integer");\n  }\n\n  try {\n    const [result] = await db.pool.query(\n      // highlight-start\n      "INSERT INTO todos (user_id, name, is_done, sort_order) VALUES (?, ?, ?, ?)",\n      [todoData.user_id, todoData.name, todoData.is_done, todoData.sort_order]\n      // highlight-end\n    );\n    return {\n      id: result.insertId,\n      user_id: todoData.user_id,\n      name: todoData.name,\n      is_done: todoData.is_done,\n      sort_order: todoData.sort_order,\n    };\n  } catch (error) {\n    throw new Error(`Failed to create todo: ${error.message}`);\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"verify-with-postman",children:"Verify with Postman"}),"\n",(0,r.jsx)(n.p,{children:"Create a new request in Postman"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Type: ",(0,r.jsx)(n.code,{children:"POST"})]}),"\n",(0,r.jsxs)(n.li,{children:["URL: ",(0,r.jsx)(n.code,{children:"http://localhost:3004/api/todos"})]}),"\n",(0,r.jsxs)(n.li,{children:["Body:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Do Laundry",\n  "is_done": 0\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Headers:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Name: Authorization"}),"\n",(0,r.jsxs)(n.li,{children:["Value: Bearer ",(0,r.jsx)(n.code,{children:"<token>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Expected Response:"}),"\n",(0,r.jsxs)(n.p,{children:["Status code: ",(0,r.jsx)(n.code,{children:"201 Created"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": 13480,\n  "user_id": "Sl8n6LJ86vQGSkwlsvGdqcLijxX2",\n  "name": "Do Laundry",\n  "is_done": 0,\n  "sort_order": 1737066299120\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"verify-with-web-page",children:"Verify with Web Page"}),"\n",(0,r.jsxs)(n.p,{children:["Open your web page and create a todo. It should succeed.\nNote: You'll still ",(0,r.jsx)(n.strong,{children:"see"})," all the todos, not just yours, because we haven't yet applied the user id to the ",(0,r.jsx)(n.code,{children:"GET"}),"s."]}),"\n",(0,r.jsx)(n.h2,{id:"verify-with-db",children:"Verify with DB"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM todos\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see that your new todos have user_id values."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);